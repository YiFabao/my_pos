1. ivy的安装,在安装好ant后，下载ivy开发包,解压后，将里面的ivy.jar拷到ant安装目录的lib目录下即可，测试可进入ivy/src/example/hello-ivy/目录运行ant
ivy 下载的包默认放在 ${user.home}/cache
2. ant 运行需要一个 build.xml (project,target,task);

3.ant 可以带参数指定配置文件
	例：ant -buildfile build.xml compile

4.查看ant 中的对每个target 的descroption 
	ant -projecthelp



=======
build.xml文件配置

项目骨架

ant task 标签元素：
    1.创建文件夹    <mkdir dir = "build/classes"/>
    2.删除文件夹    <delete dir = "build/classes"/>
    3.编译          <javac srcdir= "src" destdir="build/classes"/>
    4.打包          <jar destfile="dist/project.jar" basedir = "build/classes"/>
    5.显示语句      <echo>hello world!</echo>
    6.执行         
         <java classname = "com.yifabao.app.HelloWorld"
               classpath = "build/classes">
               <arg value="a"/>
               <arg value="b"/>
               <arg file="."/>
         </java>
    

target 标签元素
<target name="compile" depends="init" description="-->编译">
    ..
</target>


数据类型
<fileset id="source.fileset" dir="src" includes="**/*.jaava" />

使用
<copy todir="backupa">
    <fileset refid="source.fileset"/>
</copy>


<path location="lib/junit.jar"/>

<path path="build/classes;lib/junit.jar"/>   冒号或分号都行

<path>
    <fileset dir = "lib">
        <include name = "*.jar"/>
    </fileset>
</path>


<path id="junit.path" location="lib/junit.jar"/>

<path refid = "junit.path"/>

可以用src标签来将不同路径下的java文件编译到一个单独的文件中
<javac destdir = "build/classes">
    <src path="src"/>
    <src path="test"/>
</javac>


模式
<copy todir = "newweb">
    <fileset dir="web" includes="**/*.jsp"/>
</copy>
等价于
<copy todir = "newweb">
    <fileset dir="web">
        <include name = "**/*.jsp"/>
    </fileset>
</copy>


*.jsp　只匹配当前文件夹下的.jsp文件，但不包含子文件目录下的.jsp文件
**/



测试
=================================
Unit tests 单元测试,测试某段代码
System tests 测试整个系统
Acceptance tests 测试整个系统或应用程序是否满足客户的需求，验收测试
Regression testing 回归测试，测试某个修改是否让其他的程序不正常
Junit 是单元测试框架



========================================================================
用ant 开发web项目
1.开发一个web项目
2.构建一个war包
3.布署
4.后期布署活动
5.用HttpUnit 测试web应用
6.总结

web项目打包比简单地打一个jar包更加复杂.而且测试前需要先布署到web服务器中.


1.什么是web 应用?
	一个java web应用就是一个网站打成一个jar文件.这个jar文件，包含libraires,code,和resources--页面，图片以及其他内容

	resources 提供了网站的静态内容部分
	java classes,libraries,和jsp/jspx 组成了应用的动态部分.

web中各个应用都不是相互独立的,一个servlet容器把握着他们;

这个servlet 容器可能嵌入在像Jetty,或一个成熟的J2EE就用服务器像JBoss;
这些servlet容器需要知道如何执行这个web应用;
这需要一个标准的打包机制：WAR file,就像一个jar file并加上一个标准的布局.

WEB-INF 和 META-INF 目录

WEB-INF需包含一个web.xml 用来为服务器描述这个应用

java code 放在WEB-INF/classes 目录下
libraries 放在WEB-INF/lib 目录下


构建并布署war 文件是web应用构建过程的核心.

打包主要就是一个将所有的材料资源放在合适位置这样事情,保证web.xml配置是正确的.

布署和测试在成功打包后圆满结束.



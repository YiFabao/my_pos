ivy将使用maven2 仓库来解析你在ivy文件中声明的依赖。让我们来看一眼涉及到的文件的内容。

1) viy.xml文件
<ivy-module version = "2.0">
	<info organisation="apache" module="hello-ivy"/>
	<dependencies>
		<dependency org = "commons-lang" name ="commons-lang" rev = "2.0"/>
		<dependency org = "commons-cli" name = "commons-cli" rev="1.0"/>
	</dependencies>
</ivy-module>

ivy-module 中的 version属性 用于告诉ivy 这个文件使用的ivy 的版本.

info标签 :用于给出和这个我们正在定义依赖的模块有关的信息。这里只定义了组织和模块名，你可以自由选择任何你想要的组织和模块名，但是我们建议不要带空格。

dependencies 部分让你定义依赖。这里这个模块依赖两个类库：commons-lang 和 commons-cli。如你所看到的，我们使用org和name属性来定义我们需要的依赖的组织和模块名。rev属性用于明确说明你依赖的模块的修订版本。

vy默认使用maven2 仓库。我们推荐你使用mvnrepository.com 来查找你需要的模块。一旦你找到它，你将得到如何在一个maven POM中声明依赖的细节
例如：
< dependency > 
	< groupId > commons-lang </ groupId > 
	< artifactId > commons-lang </ artifactId > 
	< version > 2.0 </ version > 
</ dependency >

2)build.xml文件
应的build文件包含一个target集合，容许解析在ivy文件中声明的依赖，编译并运行示例代码，生成依赖解析报告，并清理项目的缓存。

 你可以使用标准的"ant -p" 来获取可用的target列表。可以随意看一下整个文件，这里是和依赖解析有关的部分：

 -----------------------------------------------------
 
 < project  xmlns:ivy ="antlib:org.apache.ivy.ant"  name ="hello-ivy"  default ="run" > 
	...
	<!--  =================================
	target: resolve             
	=================================  --> 
	< target  name ="resolve"  description ="--> retrieve dependencies with ivy" > 
		< ivy:retrieve  /> 
	</ target > 
</ project >
 -----------------------------------------------------


 调用ivy来解析和获取依赖是非常简单的：如果ivy安装正确，你所需要做的只是在你的ant文件中定义一个xml的命名空间(xmlns:ivy="antlib:org.apache.ivy.ant")。然后在这里命名空间中所有的ivy ant 任务都可用。

这里我们只使用了一个任务：retrieve 任务。没有任何属性，它将使用默认设置并查找名为ivy.xml的文件来获取依赖定义。这正是我们想要的，因此我们不需要做其他。

在这案例中我们定义了一个"resolve" target 并调用了retrieve 任务。这听起来有点令人困惑，实际上retrieve任务会执行一次resolve(解析依赖并下载他们到本地缓存)，然后再执行一次retrieve

3)运行项目
在命令提示符下，运行"ant":

4)发生了什么

  在没有任何设置的情况下，ivy从maven2 仓库中获取文件。这就是这里发生的事情。
      resolve任务在maven2 仓库中发现commons-lang 和 commons-cli 模块，识别commons-cli 依赖于commons-logging并作为间接依赖解析它。然后ivy下载所有对应的制品到它的缓存中(默认在你的user home下的.ivy2/cache 目录)。

  最后，retrieve任务将这些解析好的jar包从ivy缓存复制到项目默认的lib目录(你可以简单地通过设置retrieve任务的pattern属性来改变).

  如果你想生成一个泥的模块的所有依赖的详细报告，你可以调用report target，并查看在build目录中的生成文件

==========================================================================================================================

ivy的默认设置详解:

1) 概念

    默认设置主要是3种仓库组成：

	* local / 私有
	用户私有的仓库

	* shared / 共享
	在团队的所有成员之间共享的仓库。

	* public / 公共
	可以找到大部分模块，尤其是第三方模块的公共仓库.

	注意如果你独自工作，local和shared仓库之间的差异不重要，但是需要知道如何识别它们。

	现在让我们更详细的描述这些仓库概念的每一个。后面我们会描述如何实际配置它们。

	1.local / 私有
	
	当你想做一些事情而不希望被环境中发生的其他任何事情打扰时，私有仓库非常有用。这意味着每当ivy能够在这个仓库中找到模块时，这个模块将被使用，不管其他仓库里的是什么。

	举例，如果你有一个模块，声明依赖于模块foo的latest.integration修订版本，然后当foo的一个修订版本在私有仓库中被发现，这个版本将被使用，即使在其他仓库中有一个更新的修订版本可用。

	这可能让你们中的某些人困惑，但是想象你不得不在一个项目中实现一个新的特性，并且为了达到这个目标你需要修改两个模块：你在模块foo内增加一个新的方法，并在模块bar中利用。然后如果你公布模块foo到你的私有仓库，你可以保证在你的bar模块中得到它，即使有其他人在shared仓库中公布了foo的一个新的修订版本。

	但是小心，当你完成你的开发并且公布它到共享仓库时，你将不得不清理你的本地仓库以便从在共享仓库中公布的新版本中获益。

	同样注意，在本地仓库中找到的模块必须是完整的，换句话说，他们必须同时提供模块描述符和发行的制品。他们必须同时提供模块描述符和发行的制品


    2.shared 共享
	如它的名字建议的，共享仓库的目标是在整个开发团队中共享。例如你可以公布你的团队的私有模块，同样你可以放置一些在公共仓库中不能得到的模块(例如sun的jar文件)，或者仅仅是不精确(例如坏的或者不完整的模块描述符).

	注意模块可以在共享仓库和公共仓库中分隔：例如你可以在共享仓库中有模块的描述符而制品在公共仓库中。

	3.public /公共

	 大多数模块可以在公共仓库中找到，但是某些时候缺少你要的信息。这通常是一个只能通过internet连接访问的仓库，虽然这不是强制




